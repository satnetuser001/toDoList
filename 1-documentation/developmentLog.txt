16.11.23
Created a new MySQL database and its user (the commands are executed as Mysql root):
	CREATE DATABASE to_do_list
	CHARACTER SET utf8
	COLLATE utf8_general_ci;

	CREATE USER 'to_do_list_user'@'localhost' IDENTIFIED BY '1077';
	GRANT ALL PRIVILEGES ON to_do_list.* TO 'to_do_list_user'@'localhost';

Installed a new Laravel project:
	composer create-project --prefer-dist laravel/laravel toDoList

Created a new Git repository and pushed it to GitHub:
	git init
	git add .
	git commit
	git remote add origin git@github.com:satnetuser001/toDoList.git
	git branch -M main
	git push -u origin main
Further, Git commits will not be described, they can be viewed on Github.

Added database setting to .env.
Removed the listing of all files from .gitignor so that the entire project can be seen on GitHub.

Installed Sanctum:
	composer require laravel/sanctum
	php artisan vendor:publish --provider="Laravel\Sanctum\SanctumServiceProvider"
	php artisan migrate

New commit: Installed Sanctum.

Divided the functionality of the application into two parts: Users and Tasks.

Users functionality:
Created UserController:
	php artisan make:controller API/UserController

Registering a new user functionality was added: route and method in the controller.
New commit.

Regenerate user token functionality was added: route and method in the controller.
New commit.

17.11.23
Tasks functionality:
There are many requirements for the "tasks", so we will implement them in parts.

1. A task can have subtasks, the level of nesting is unlimited, use Enum, and use recursion.
Created route.

Created TaskController:
	php artisan make:controller API/TaskController

Created Task Model:
	php artisan make:model Task

Created Migration:
	php artisan make:migration create_tasks_table --create=tasks

Filling out the migration and applying it:
	php artisan migrate

Added the necessary properties and methods to the User and Task models.

18.11.23
Added "store tasks" functionality.
New commit.

Added "Get all user tasks" functionality.

Added "Get one user task" functionality.
New commit.

2.The user cannot edit or delete other people's tasks.
To implement this functionality, use Policies.

Created TaskPolicy:
	php artisan make:policy TaskPolicy

Added isOwner() method to TaskPolicy.
Mapping the model to policy in AuthServiceProvider.
Applied the Policy to the necessary TaskController methods in the construct (oneMy).

New commit.

3. Added "delete task" functionality.
New commit.

19.11.23
In the delete method add: A done task can't be deleted.
New commit.

4. Added "update task" functionality.
New commit.

4a. Changing status is done using a separate method.
New commit.

20.11.23
5. Added "filter task" functionality.
New commit.

Seeds added.
New commit.

Making refresh a migration and seed:
	php artisan migrate:fresh --seed
This will reset the database and fill it with test data: two users with five first-level tasks for each.

Generated authorization tokens for users with API requests with Postman:
Method: patch;
Route: http://localhost:8000/api/users/regenerateToken
Request:
	{
	    "name": "apiUser1",
	    "email": "apiUser1@gmail.com",
	    "password": "1077",
	    "program": "postman"
	}
Response:
	{
    	"newToken": "1|OOTg7jIh3DgkgGrWj6av1Oa5fQs8upUrU0r5AeXse649f0c5"
	}

Request:
	{
	    "name": "apiUser2",
	    "email": "apiUser2@gmail.com",
	    "password": "1077",
	    "program": "postman"
	}
Response:
	{
	    "newToken": "2|p5NEsO2KKaqKEiyTgiDqKxEpGDv7bhaqnFkmORAwa4f4ea93"
	}

Made database dump in 1-documentation/dumpDB:
	mysqldump -uroot -p to_do_list > to_do_list.sql

New commit.